// Test generated by RoostGPT for test ReactTest1 using AI Type Open AI and AI Model gpt-4-1106-preview

import React from 'react';
import { render, cleanup } from '@testing-library/react';
import RoomFilter from '../../../../src/Components/RoomsContainer/RoomsFilter';
import { RoomContextProvider } from '../../../../src/Context/Context';

// The RoomContextProvider would be a context provider that you would import from your context file.

describe('RoomFilter', () => {
  // In case any setup needs to be done before each test
  beforeEach(() => {
    // Setup can go here
  });

  afterEach(cleanup);

  test('should render without crashing', () => {
    render(
      <RoomContextProvider>
        <RoomFilter rooms={[]} />
      </RoomContextProvider>
    );
  });

  test('should display the correct number of options for room type', () => {
    const rooms = [
      { type: 'single', capacity: 1 },
      { type: 'double', capacity: 2 },
      { type: 'family', capacity: 4 },
      { type: 'single', capacity: 1 }
    ];

    const { getAllByTestId } = render(
      <RoomContextProvider>
        <RoomFilter rooms={rooms} />
      </RoomContextProvider>
    );
    expect(getAllByTestId('room-type-option')).toHaveLength(4); // 'all' + 3 unique types
  });

  test('should call handleChange on changing options', () => {
    // Mock handleChange function
    const handleChange = jest.fn();

    const { getByTestId } = render(
      <RoomContextProvider value={{ handleChange }}>
        <RoomFilter rooms={[]} />
      </RoomContextProvider>
    );

    fireEvent.change(getByTestId('room-type-select'), { target: { value: 'double' } });
    expect(handleChange).toHaveBeenCalledWith('double');
  });

  // Additional tests to be written ...
});


