 Test generated by RoostGPT for test ReactTest1 using AI Type Open AI and AI Model gpt-4-1106-preview

import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import Room from './Room';

// Mocking react-router-dom for Link component usage
jest.mock('react-router-dom', () => ({
  Link: ({ children }) => children,
}));

describe('Room Component', () => {
  const roomProps = {
    name: 'Sample Room',
    slug: 'sample-room',
    images: ['img1.jpg', 'img2.jpg'],
    price: 150
  };

  // Test case 1: Component renders correctly with given props
  test('renders Room component with provided props', () => {
    render(<Room room={roomProps} />);
    expect(screen.getByText('Sample Room')).toBeInTheDocument();
    expect(screen.getByText('$ 150')).toBeInTheDocument();
  });

  // Test case 2: Default image is displayed when images prop is not provided
  test('displays default image when images prop is not provided', () => {
    const modifiedProps = {...roomProps, images: []};
    render(<Room room={modifiedProps} />);
    const image = screen.getByAltText('single room');
    expect(image).toHaveAttribute('src', expect.stringContaining('room-1.jpeg'));
  });

  // Test case 3: Room link URL contains the room's slug
  test('contains link to room with correct slug', () => {
    render(<Room room={roomProps} />);
    expect(screen.getByText('Feature')).toHaveAttribute('href', '/rooms/sample-room');
  });

  // Test case 4: Room price and name are displayed as expected
  test('displays the correct room price and name', () => {
    render(<Room room={roomProps} />);
    expect(screen.getByText('per night')).toBeInTheDocument();
    expect(screen.getByText('Sample Room')).toBeInTheDocument();
  });

  // Test case 5: Correct prop type validation
  test('fails prop type validation with incorrect props', () => {
    // Here we would test React's PropTypes validation.
    // Since PropTypes throws a console.error message when failing validation,
    // we would spy on console.error and check if it has been called.
    const consoleSpy = jest.spyOn(console, 'error');
    consoleSpy.mockImplementation(() => {});
    
    const incorrectProps = {...roomProps, price: 'not-a-number'};
    render(<Room room={incorrectProps} />);
    
    expect(consoleSpy).toHaveBeenCalled();
    consoleSpy.mockRestore();
  });
});

