 Test generated by RoostGPT for test ReactTest1 using AI Type Open AI and AI Model gpt-4-1106-preview

import React from 'react';
import { render, cleanup } from '@testing-library/react';
import { BrowserRouter as Router } from 'react-router-dom';
import App from './App';

// Mock components
jest.mock("../Pages/Home", () => () => <div data-testid="home-page">Home Page</div>);
jest.mock("../Pages/Room", () => () => <div data-testid="room-page">Room Page</div>);
jest.mock("../Pages/SingleRoom", () => () => <div data-testid="single-room-page">Single Room Page</div>);
jest.mock("../Pages/Error", () => () => <div data-testid="error-page">Error Page</div>);
jest.mock("../Components/Navbar/Navbar", () => () => <nav data-testid="navbar">Navbar</nav>);
jest.mock("../Components/Footer/Footer", () => () => <footer data-testid="footer">Footer</footer>);

describe('App component routing', () => {

  afterEach(cleanup);

  test('Should render the Navbar and Footer on all pages', () => {
    const { getByTestId } = render(
      <Router>
        <App />
      </Router>
    );
    
    expect(getByTestId('navbar')).toBeInTheDocument();
    expect(getByTestId('footer')).toBeInTheDocument();
  });

  test('Should render the Home page component on root route', () => {
    const { getByTestId } = render(
      <Router>
        <App />
      </Router>
    );

    expect(getByTestId('home-page')).toBeInTheDocument();
  });

  test('Should render Room page component on "/rooms/" route', () => {
    window.history.pushState({}, 'Room Page', '/rooms/');
    const { getByTestId } = render(
      <Router>
        <App />
      </Router>
    );

    expect(getByTestId('room-page')).toBeInTheDocument();
  });

  test('Should render SingleRoom page component on "/rooms/:slug" route', () => {
    window.history.pushState({}, 'Single Room Page', '/rooms/example-slug');
    const { getByTestId } = render(
      <Router>
        <App />
      </Router>
    );

    expect(getByTestId('single-room-page')).toBeInTheDocument();
  });

  test('Should render Error page component on an unknown route', () => {
    window.history.pushState({}, 'Error Page', '/unknown-route');
    const { getByTestId } = render(
      <Router>
        <App />
      </Router>
    );

    expect(getByTestId('error-page')).toBeInTheDocument();
  });

});

