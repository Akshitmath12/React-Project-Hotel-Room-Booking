// Test generated by RoostGPT for test ReactTest1 using AI Type Open AI and AI Model gpt-4-1106-preview

import reportWebVitals from './reportWebVitals';

describe('reportWebVitals', () => {
  it('calls onPerfEntry with each metric when it is a function', async () => {
    // Mock the web-vitals functions
    const getCLS = jest.fn();
    const getFID = jest.fn();
    const getFCP = jest.fn();
    const getLCP = jest.fn();
    const getTTFB = jest.fn();

    jest.mock('web-vitals', () => ({
      getCLS,
      getFID,
      getFCP,
      getLCP,
      getTTFB,
    }));

    // Mock the onPerfEntry function
    const onPerfEntry = jest.fn();

    // Execute the reportWebVitals function
    reportWebVitals(onPerfEntry);

    // Since reportWebVitals function performs asynchronous operations, we need to wait for the next tick
    await new Promise(resolve => setImmediate(resolve));

    // Assertions to ensure every web-vitals function was called with the onPerfEntry function
    expect(getCLS).toHaveBeenCalledWith(onPerfEntry);
    expect(getFID).toHaveBeenCalledWith(onPerfEntry);
    expect(getFCP).toHaveBeenCalledWith(onPerfEntry);
    expect(getLCP).toHaveBeenCalledWith(onPerfEntry);
    expect(getTTFB).toHaveBeenCalledWith(onPerfEntry);

    // Unmock web-vitals module after the tests
    jest.unmock('web-vitals');
  });

  it('does not call onPerfEntry if it is not a function', () => {
    // Use a non-function type as the onPerfEntry argument
    const onPerfEntry = 'not-a-function';

    // Execute the reportWebVitals function with a non-function argument
    reportWebVitals(onPerfEntry);

    // No assertion is needed here, as we are testing that it does not throw and the web-vitals functions are not called
  });
});

